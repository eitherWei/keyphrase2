sample
_
_
complex
_
combinatori
auction
_
structur
item
graph
_
hypertre
decomposit
_
abstract
georg
gottlob
_
laboratori
oxford
univers
ox1
_
oxford
_
uk
georg
_
gottlob
comlab
_
ox
_
ac
_
uk
gianluigi
greco
dipartimento
di
matematica
univers
_
calabria
rend
_
itali
ggreco
mat
_
unic
_
_
abstract
_
winner
determin
problem
_
combinatori
auction
_
_
problem
_
_
_
alloc
_
_
item
_
_
bidder
_
maxim
_
sum
_
_
accept
bid
price
_
_
_
problem
_
_
gener
nphard
_
_
_
_
_
_
feasibl
_
polynomi
time
_
_
instanc
_
associ
item
graph
_
bound
treewidth
_
structur
item
graph
_
_
_
_
item
graph
_
graph
_
node
_
_
_
_
_
correspond
_
item
_
_
edg
_
such
_
_
_
bid
_
_
item
_
_
_
induc
_
subgraph
_
note
_
mani
item
graph
_
_
associ
_
_
combinatori
auction
_
_
_
_
edg
_
_
_
_
connected
_
_
fact
_
_
tractabl
_
_
_
structur
item
graph
_
fix
treewidth
exist
_
_
_
_
_
_
_
left
_
crucial
open
problem
_
_
_
paper
_
_
solv
_
problem
_
_
_
_
exist
_
structur
item
graph
_
_
intract
_
_
_
treewidth
_
_
_
_
bad
news
_
_
investig
differ
kind
_
structur
requir
_
_
_
_
_
isol
tractabl
class
_
combinatori
auction
_
_
show
_
_
notion
_
hypertre
decomposit
_
_
_
measur
_
hypergraph
cyclic
_
turn
_
_
_
most
use
_
_
_
_
_
show
_
_
winner
determin
problem
_
solvabl
_
polynomi
time
_
instanc
_
bidder
interact
_
_
_
_
dual
hypergraph
_
bound
hypertre
width
_
_
more
_
_
_
show
_
_
class
_
tractabl
instanc
_
_
mean
_
_
approach
_
contain
_
class
_
instanc
_
structur
item
graph
_
categori
_
subject
descriptor
_
comput
applic
_
social
_
behavior
scienc
econom
_
_
theori
_
comput
_
analysi
_
algorithm
_
problem
complex
_
introduct
combinatori
auction
_
combinatori
auction
_
_
_
mechan
_
resourc
_
task
alloc
_
bidder
_
_
_
_
bid
_
combin
_
item
_
_
_
desir
_
bidder
valuat
_
bundl
_
item
_
_
equal
_
_
sum
_
_
valuat
_
_
individu
item
_
_
framework
_
_
_
_
regul
agent
interact
_
sever
applic
domain
cf
_
_
_
_
_
such
_
_
electr
market
_
bandwidth
auction
_
_
transport
exchang
_
_
_
combinatori
auction
_
pair
_
_
_
i1
_
_
_
_
_
im
_
_
set
_
item
_
auction
_
_
sell
_
_
b1
_
_
_
_
_
bn
_
_
set
_
bid
_
_
buyer
interest
_
_
item
_
_
_
bid
bi
_
_
form
item
bi
_
pay
bi
_
_
pay
bi
_
ration
number
_
_
price
buyer
offer
_
_
item
_
item
bi
_
_
outcom
_
_
_
subset
_
such
_
item
bi
∩item
bj
_
_
_
pair
bi
_
bj
_
bid
_
_
_
_
winner
determin
problem
_
crucial
problem
_
combinatori
auction
_
_
determin
_
outcom
b∗
_
maxim
_
sum
_
_
accept
bid
price
_
_
_
bi∈b∗
pay
bi
_
_
_
possibl
outcom
_
_
problem
_
_
winner
determin
problem
_
_
_
_
_
_
_
_
intract
_
_
np
hard
_
_
_
_
approxim
_
polynomi
time
_
np
zpp
_
henc
_
_
_
_
_
surpris
_
sever
effort
_
_
spent
_
design
_
effici
algorithm
_
gener
auction
_
_
_
_
_
_
_
_
_
_
class
_
instanc
_
_
_
winner
determin
problem
_
feasibl
_
polynomi
time
_
_
_
_
_
_
_
_
fact
_
_
bidder
interact
_
_
_
_
use
_
_
class
_
tractabl
combinatori
auction
_
item
graph
_
_
_
_
most
gener
class
_
tractabl
combinatori
auction
_
_
_
_
_
_
interact
_
bidder
_
_
notion
_
item
graph
_
_
_
graph
_
node
_
_
_
_
_
correspond
_
item
_
_
edg
_
such
_
_
_
figur
_
exampl
maxwsp
problem
_
hypergraph
i0
_
b0
_
_
pack
_
_
_
primal
graph
_
i0
_
b0
_
_
_
_
_
item
graph
_
i0
_
b0
_
bid
_
_
item
_
_
_
induc
_
subgraph
_
_
_
_
winner
determin
problem
_
_
_
_
solvabl
_
polynomi
time
_
interact
_
bidder
_
_
_
_
mean
_
structur
item
graph
_
_
_
_
tree
_
_
more
_
_
graph
_
tree
_
structur
_
bound
treewidth
_
_
_
_
intuit
_
_
item
graph
_
_
_
_
_
notic
_
bidder
interact
_
combinatori
auction
_
_
_
_
_
mean
_
hypergraph
_
such
_
_
set
_
node
_
coincid
_
set
_
item
_
_
_
_
edg
_
_
_
_
bid
_
_
buyer
item
bi
bi
_
special
item
graph
_
_
_
_
primal
graph
_
_
_
_
_
_
_
_
contain
_
edg
_
_
pair
_
node
_
_
hyperedg
_
_
_
_
_
_
item
graph
_
_
_
_
_
_
simplif
_
_
_
_
_
_
edg
_
_
_
_
connect
condit
_
_
node
_
_
_
hyperedg
_
exampl
_
_
hypergraph
i0
_
b0
_
_
figur
_
_
_
_
_
combinatori
auction
i0
_
b0
_
_
i0
i1
_
_
_
_
_
i5
_
_
item
bi
hi
_
_
_
_
_
primal
graph
_
i0
_
b0
_
_
_
figur
_
_
_
_
exampl
item
graph
_
_
_
figur
_
_
_
_
edg
_
_
_
_
connect
_
h1
_
_
_
bold
_
open
problem
_
_
structur
item
graph
_
_
_
abov
_
tractabl
result
_
structur
item
graph
turn
_
_
_
use
_
practic
onli
_
structur
item
graph
_
_
_
_
_
_
_
_
_
_
_
_
mani
item
graph
_
_
associ
_
combinatori
auction
_
_
_
_
_
clear
_
_
determin
_
structur
item
graph
_
certain
constant
treewidth
exist
_
_
_
_
_
_
_
comput
such
structur
item
graph
_
_
polynomi
time
algorithm
_
_
_
best
simplif
_
_
primal
graph
_
_
_
onli
_
_
_
case
_
_
item
graph
_
_
_
_
line
_
cycl
_
_
tree
_
_
_
_
_
import
open
problem
cf
_
_
_
_
tractabl
_
check
_
_
combinatori
auction
_
_
item
graph
_
treewidth
bound
_
fix
natur
number
exist
_
_
_
_
_
polynomi
time
_
_
_
_
weight
set
pack
_
let
_
note
_
_
hypergraph
represent
_
_
combinatori
auction
_
_
_
use
_
_
_
analog
_
_
winner
determin
problem
_
_
maximum
weight
set
pack
problem
_
hypergraph
clear
_
_
_
_
_
_
pack
_
hypergraph
_
set
_
hyperedg
_
such
_
_
_
pair
_
_
_
_
_
_
_
_
_
weight
function
_
_
_
_
_
_
time
comput
function
_
_
ration
number
_
_
weight
_
pack
_
_
ration
number
h∈h
_
_
_
_
_
_
maximum
weight
set
pack
problem
_
_
_
_
_
_
_
maxwsp
_
_
_
_
problem
_
_
pack
_
_
_
maximum
weight
_
_
_
pack
_
_
_
see
_
maxwsp
_
_
differ
formul
_
_
winner
determin
problem
_
_
combinatori
auction
_
_
_
_
suffici
_
defin
_
weight
function
_
item
bi
pay
bi
_
_
_
_
set
_
_
solut
_
_
weight
set
pack
problem
_
_
_
_
_
_
coincid
_
_
set
_
_
solut
_
_
winner
determin
problem
_
_
_
exampl
_
consid
_
_
hypergraph
i0
_
b0
_
_
figur
_
_
_
exampl
pack
_
i0
_
b0
_
h1
_
_
_
correspond
_
_
outcom
_
i0
_
b0
_
_
_
auction
accept
_
bid
b1
_
_
_
_
bid
b1
_
b2
_
_
b3
_
such
_
pay
b1
pay
b2
pay
b3
_
_
pack
_
_
solut
_
_
problem
maxwsp
i0
_
b0
_
i0
_
b0
_
_
_
_
pack
h∗
h2
_
h3
_
such
_
i0
_
b0
h∗
i0
_
b0
_
contribut
_
primari
aim
_
_
paper
_
_
_
larg
tractabl
class
_
_
winner
determin
problem
_
_
_
_
_
_
recogniz
_
toward
_
aim
_
_
first
studi
structur
item
graph
_
solv
_
open
problem
_
_
_
result
_
_
bad
news
_
_
_
np
complet
_
check
_
combinatori
auction
_
structur
item
graph
_
treewidth
_
more
_
_
_
ig
_
denot
_
class
_
_
_
hypergraph
_
_
item
tree
_
treewidth
bound
_
_
_
prove
_
_
_
hypergraph
associ
_
combinatori
auction
problem
belong
_
ig
_
_
np
complet
_
_
_
light
_
_
result
_
_
_
crucial
_
assess
_
_
_
_
other
kind
_
structur
requir
_
_
_
_
_
polynomi
time
_
_
_
_
_
_
_
isol
tractabl
class
_
_
maximum
weightedset
pack
problem
_
_
_
_
_
winner
determin
problem
_
_
investig
_
_
time
_
_
_
_
good
news
_
_
_
_
_
_
hypergraph
_
_
dual
¯h
_
_
such
_
node
_
_
_
_
_
_
correspond
_
hyperedg
_
_
_
_
_
node
_
_
_
_
_
show
_
maxwsp
_
tractabl
_
_
class
_
_
instanc
_
dual
hypergraph
_
hypertre
width
bound
_
short
_
class
hw
_
_
hypergraph
_
note
_
key
issu
_
_
tractabl
_
_
consid
_
hypertre
width
_
_
dual
hypergraph
¯h
_
_
_
auction
hypergraph
_
_
fact
_
_
_
show
_
maxwsp
remain
np
hard
_
_
_
acycl
_
_
_
_
_
_
hypertre
width
_
_
_
_
node
_
_
_
hyperedg
_
most
_
_
_
relev
special
class
_
hypergraph
_
hw
_
_
_
design
_
paralleliz
algorithm
_
maxwsp
_
_
_
_
_
weight
function
_
_
_
_
logarithm
space
_
weight
_
polynomi
_
_
_
_
_
_
hyperegd
_
unitari
weight
_
_
_
interest
_
_
_
pack
_
_
maximum
number
_
edg
_
_
show
_
maxwsp
_
_
_
_
logcfl
algorithm
_
recal
_
_
fact
_
_
logcfl
_
_
class
_
decis
problem
_
_
logspac
reduc
_
context
free
languag
_
_
_
logcfl
nc2
see
_
_
_
_
_
_
_
_
show
_
noth
_
_
_
term
_
gener
_
_
_
hypertre
decomposit
_
dual
hypergraph
_
_
_
treewidth
_
item
graph
_
_
_
contrari
_
_
_
hypertre
_
decomposit
method
_
_
more
gener
_
_
method
_
structur
item
graph
_
_
fact
_
_
show
_
_
larger
class
_
instanc
_
tractabl
_
_
_
new
approach
_
_
_
_
structur
item
graph
approach
_
_
_
_
np
hard
_
_
bound
width
structur
item
graph
_
_
_
due
_
_
great
gener
_
_
_
_
_
peculiar
_
_
definit
_
_
proof
_
_
abov
result
_
_
_
interest
insight
_
_
notion
_
structur
item
graph
_
_
_
_
show
_
structur
item
graph
_
_
_
_
_
correspond
_
_
special
kind
_
hypertre
decomposit
_
_
dual
hypergraph
_
_
_
call
strict
hypertre
decomposit
_
game
character
_
_
notion
_
strict
hypertre
width
_
_
_
_
_
special
_
robber
_
marshal
game
_
_
_
character
_
hypertre
width
_
_
_
_
_
clear
_
further
requir
_
hypertre
decomposit
_
_
rest
_
_
paper
_
_
_
_
_
section
discuss
_
intract
_
structur
item
graph
_
section
present
_
polynomi
time
algorithm
_
_
maxwsp
_
_
class
_
_
instanc
_
dual
hypergraph
_
bound
hypertre
width
_
_
discuss
_
case
_
_
algorithm
_
_
_
paralleliz
_
_
comparison
_
_
class
ig
_
_
hw
_
_
_
_
section
_
_
_
_
section
_
draw
_
conclus
_
_
_
direct
_
further
research
_
_
complex
_
structur
item
graph
let
_
hypergraph
_
graph
_
_
_
item
graph
_
_
_
_
_
_
_
_
subgraph
_
_
_
_
node
_
_
_
_
_
import
class
_
item
graph
_
_
_
structur
item
graph
_
_
_
_
_
_
item
graph
_
bound
treewidth
_
_
_
_
tree
decomposit
_
graph
_
_
pair
_
_
_
_
_
tree
_
_
_
_
function
_
_
_
vertex
set
_
vertic
_
such
_
_
follow
condit
_
satisfi
_
_
_
vertex
_
_
_
exist
such
_
_
_
_
edg
_
_
_
exist
such
_
_
_
_
_
vertex
_
_
_
set
induc
_
subtre
_
_
_
width
_
_
_
_
number
maxp∈n
_
_
treewidth
_
_
_
_
tw
_
_
_
minimum
width
_
_
_
tree
decomposit
_
_
winner
determin
problem
_
_
_
_
polynomi
time
_
item
graph
_
bound
treewidth
_
theorem
cf
_
_
_
width
tree
decomposit
_
_
_
item
graph
_
_
_
_
_
_
maxwsp
_
_
_
_
_
time
_
mani
item
graph
_
_
associ
_
hypergraph
_
_
_
exampl
_
observ
_
_
item
graph
_
figur
_
_
treewidth
_
_
figur
_
report
_
item
graph
_
treewidth
_
_
_
_
_
_
_
open
question
_
_
_
constant
_
_
_
_
_
polynomi
time
_
_
item
graph
_
treewidth
exist
_
_
_
_
_
_
such
_
item
graph
_
_
_
_
_
let
ig
_
denot
_
class
_
_
_
hypergraph
_
_
item
graph
such
_
tw
_
_
main
result
_
_
section
_
_
show
_
_
class
ig
_
_
hard
_
_
_
theorem
_
_
_
hypergraph
belong
_
ig
_
_
np
hard
_
_
proof
_
_
result
reli
_
_
elabor
reduct
_
_
hamiltonian
path
problem
hp
_
_
_
_
_
_
_
hamiltonian
path
_
node
_
node
_
direct
graph
_
_
_
help
_
intuit
_
_
report
_
high
level
overview
_
_
main
ingredi
_
_
_
proof1
_
_
gener
idea
_
_
build
hypergraph
hg
such
_
_
_
_
item
graph
_
hg
_
tw
_
_
onli
_
hp
_
_
_
solut
_
first
_
_
discuss
_
way
hg
_
_
_
see
figur
_
_
_
illustr
_
_
_
graph
consist
_
_
node
_
_
_
_
_
_
_
set
_
_
edg
_
e1
_
_
e2
_
_
e3
_
_
e4
_
_
_
_
hg
_
let
_
_
direct
graph
_
_
_
_
set
_
_
node
_
hg
_
such
_
_
_
_
_
hg
contain
_
node
bsx
_
btx
_
bx
_
bx
_
bdx
_
_
_
_
_
hg
contain
_
node
nsx
_
nsx
_
nti
_
nti
_
nse
_
nte
_
_
other
node
_
_
hg
_
hyperedg
_
hg
_
_
_
kind
_
_
_
_
hg
contain
_
hyperedg
_
sx
bsx
nse
_
_
tx
btx
nte
_
_
a1
bdx
_
bx
_
a2
bdx
_
bx
_
_
a3
bx
_
bx
notic
_
_
hyperedg
induc
cliqu
_
_
node
bx
_
bx
_
bdx
_
detail
proof
_
_
_
_
_
appendix
_
avail
_
www
_
mat
_
unic
_
_
∼ggreco
paper
_
_
pdf
_
figur
_
proof
_
theorem
_
_
_
hg
hyperedg
_
_
_
_
onli
_
skeleton
_
tree
decomposit
td
_
hg
_
sa1
bsx
_
bx
_
sa2
bsx
_
bx
_
sa3
bsx
_
bdx
notic
_
_
hyperedg
_
a1
_
a2
_
_
a3
induc
cliqu
_
_
node
bsx
_
bx
_
bx
_
bdx
_
ta1
btx
_
bx
_
ta2
btx
_
bx
_
_
ta3
btx
_
bdx
notic
_
_
hyperedg
_
a1
_
a2
_
_
a3
induc
cliqu
_
_
node
btx
_
bx
_
bx
_
bdx
_
_
_
_
_
hg
contain
_
hyperedg
_
shx
nsx
_
nsx
_
thi
nti
_
nti
_
see
nsx
_
nse
_
see
nsx
_
nse
notic
_
_
_
hyperedg
_
shx
induc
cliqu
_
_
node
nsx
_
nsx
_
nse
_
tee
nti
_
nte
_
tee
nti
_
nte
notic
_
_
_
hyperedg
_
thi
induc
cliqu
_
_
node
nti
_
nti
_
nte
_
notic
_
_
_
_
abov
hyperedg
_
_
_
_
form
sx
_
tx
contain
_
_
node
_
_
_
exampl
_
_
hyperedg
_
kind
_
_
_
reader
_
refer
_
_
exampl
construct
_
_
figur
_
_
_
notic
_
_
instanc
_
_
sx
bsx
_
nse2
_
nse3
_
_
tt
btt
_
nte4
_
nte3
_
_
_
_
denot
_
dg
_
set
_
_
hyperedg
_
hg
_
_
third
kind
_
_
_
reduct
_
_
_
_
dg
_
_
_
arbitrari
set
_
hyperedg
satisfi
_
_
condit
_
_
_
_
_
let
pg
_
_
set
_
_
follow
pg
pair
_
pg
bx
_
bx
nsx
_
nsx
_
nti
_
nti
_
nse
_
nte
_
_
_
_
let
denot
_
set
_
_
hyperedg
_
_
_
_
_
_
_
_
_
set
_
let
v∈v
_
_
_
dg
_
_
_
set
such
_
_
c1
_
pg
_
dg
_
c2
_
pg
_
dg
_
c3
∀α
such
_
∃β
_
_
pg
_
_
pg
_
_
_
_
dg
_
_
_
c4
∀s
such
_
_
_
∃α
_
_
_
pg
_
_
_
_
case
_
_
dg
_
_
_
_
set
dg
_
such
_
_
_
_
hyperedg
_
_
_
_
_
_
_
_
node
_
_
pair
_
pg
cf
_
c1
_
c2
_
_
_
hyperedg
_
dg
touch
onli
vertic
_
_
_
least
pair
_
pg
cf
_
c3
_
_
_
_
tripl
_
node
_
_
capabl
_
_
_
_
element
_
dg
_
none
_
_
pair
_
_
_
_
_
_
belong
_
pg
cf
_
c4
_
_
reader
_
_
ask
_
set
dg
exist
_
_
satisfi
c1
_
c2
_
c3
_
c4
_
_
_
follow
lemma
_
_
_
answer
_
question
_
refer
_
reader
_
_
proof
_
_
exampl
construct
_
lemma
_
set
dg
_
_
dg
pg
_
satisfi
condit
c1
_
c2
_
c3
_
_
c4
_
_
_
_
time
pg
_
key
ingredi
_
_
_
_
_
_
posit
_
_
_
overview
_
_
key
ingredi
_
_
proof
_
let
_
_
arbitrari
item
graph
_
hg
_
_
let
td
_
_
width
tree
decomposit
_
note
_
_
_
_
_
cliqu
_
_
_
_
_
_
node
bsx
_
bx
_
bx
_
bdx
_
_
item
graph
_
hg
_
treewidth
_
least
_
_
_
_
basic
observ
_
_
purpos
_
_
_
correct
_
_
reduct
_
block
_
td
_
first
_
_
observ
_
td
_
contain
_
special
kind
_
vertex
_
_
_
_
_
node
_
td
contain
vertex
bs
such
_
bs
bsx
_
bx
_
bx
_
bdx
_
_
vertex
bt
such
_
bt
btx
_
bx
_
bx
_
bdx
_
_
_
_
_
edg
_
_
td
contain
vertex
ns
_
such
_
ns
_
nse
_
nsx
_
nsx
_
_
vertex
nt
_
such
_
nt
_
nte
_
nti
_
nti
_
_
_
_
vertic
_
_
_
cover
_
cliqu
_
hg
associ
_
_
hyperedg
_
kind
_
_
_
_
_
vertic
play
specif
role
_
_
reduct
_
_
_
_
direct
edg
_
_
_
_
td
_
mean
_
_
vertic
_
ns
_
_
_
_
_
start
_
_
_
_
nt
_
_
_
_
_
termin
_
_
_
_
_
node
_
_
_
td
_
mean
_
_
vertic
_
bs
_
_
_
_
point
_
edg
_
_
_
_
_
bt
_
_
_
_
point
_
edg
_
_
_
_
_
exampl
_
figur
_
report
_
skeleton
_
tree
decomposit
td
_
_
reader
_
notic
_
_
_
block
_
abov
_
_
_
_
relat
_
_
hypergraph
hg
_
figur
_
other
block
_
_
_
_
form
_
_
_
next
_
connected
_
block
_
_
uniqu
_
_
connect
_
_
second
crucial
observ
_
_
_
_
path
_
vertex
_
_
form
bs
resp
_
_
bt
_
vertex
_
_
form
ns
_
resp
_
_
nt
_
_
_
_
special
vertex
_
_
form
_
such
_
_
_
nse
_
nte
_
_
_
edg
_
_
_
_
exist
_
_
such
vertex
_
_
_
role
_
_
_
hyperedg
_
dg
_
_
argument
_
_
proof
_
_
_
_
first
_
_
observ
_
bs
ns
_
dg
sx
_
bt
nt
_
dg
ty
_
_
_
_
show
properti
state
_
_
pair
_
consecut
vertic
_
_
_
path
_
bs
_
ns
_
resp
_
_
bt
_
nt
_
_
bs
ns
_
resp
_
_
bt
nt
_
_
_
_
_
_
_
dg
sx
resp
_
_
∩χ
dg
ty
_
_
_
_
observ
_
_
_
_
_
properti
_
_
hyperedg
_
dg
_
_
_
_
difficult
_
show
_
_
pair
_
consecut
vertic
_
_
share
_
node
_
hg
_
pair
_
pg
_
_
_
_
touch
sx
resp
_
_
ty
_
_
_
treewidth
_
_
_
_
_
conclud
_
vertex
_
_
_
_
_
_
path
_
such
_
_
nse
_
nte
_
_
_
edg
_
_
_
end
_
note
_
nse
sx
_
nte
ty
_
_
_
dg
_
_
particular
_
_
_
_
onli
kind
_
vertex
satisfi
_
condit
_
_
_
_
_
_
path
_
_
_
further
vertex
_
_
form
_
_
_
resp
_
_
_
_
_
_
_
help
_
intuit
_
_
observ
_
_
vertex
_
_
form
_
_
td
correspond
_
_
select
_
_
edg
_
node
_
node
_
_
hamiltonian
path
_
_
fact
_
_
_
uniqu
_
_
vertic
_
_
_
_
connect
_
_
_
_
correspond
_
_
_
_
_
exist
_
hamiltonian
path
_
_
_
vertic
_
_
form
_
_
_
_
exampl
_
_
figur
_
_
_
vertic
_
_
form
_
_
_
_
_
_
_
_
td
_
_
gt
show
_
correspond
hamiltonian
path
_
unus
block
_
_
_
_
third
ingredi
_
_
proof
_
_
observ
_
_
vertex
_
_
form
_
_
_
_
edg
_
_
_
_
td
_
_
_
_
_
edg
_
_
_
_
_
_
hamiltonian
path
_
_
_
correspond
block
ns
_
resp
_
_
nt
_
_
_
_
_
_
_
subtre
_
_
_
block
ns
_
resp
_
_
nt
_
_
_
_
_
edg
_
_
form
_
resp
_
_
_
such
_
_
resp
_
_
_
_
_
td
_
_
_
_
figur
_
show
_
_
_
_
_
_
_
td
_
_
figur
_
show
_
_
block
ns
_
e3
_
nt
_
e3
_
_
_
_
td
_
_
_
connected
condit
_
_
tractabl
case
_
hypertre
decomposit
_
_
structur
item
graph
_
intract
_
_
_
relev
_
assess
_
other
structur
restrict
_
_
_
_
singl
_
class
_
tractabl
maxwsp
instanc
_
_
_
end
_
_
focu
_
_
notion
_
hypertre
decomposit
_
_
_
natur
gener
_
hypergraph
acycl
_
_
_
_
_
_
_
other
domain
_
_
_
constraint
satisfact
_
databas
queri
evalu
_
_
_
tractabl
island
_
np
hard
problem
_
hypertre
_
hypergraph
_
tripl
_
_
_
_
_
_
_
tree
_
_
_
_
_
function
_
associ
_
vertex
_
_
set
_
_
_
_
_
subtre
_
_
_
defin
v∈n
_
_
denot
_
set
_
vertic
_
_
vertic
_
_
_
_
_
_
tp
denot
_
subtre
_
_
_
_
definit
_
hypertre
decomposit
_
hypergraph
_
hypertre
hd
_
_
_
_
satisfi
_
_
follow
condit
_
_
_
_
edg
_
_
exist
vertic
such
_
_
_
_
cover
_
figur
_
exampl
maxwsp
problem
_
hypergraph
h1
_
hypergraph
¯h1
_
width
hypertre
decomposit
_
¯h1
_
_
_
_
node
_
_
set
vertic
induc
_
subtre
_
_
_
_
_
vertic
_
_
_
_
_
vertic
_
tp
_
_
width
_
hypertre
decomposit
_
_
_
maxp∈vertic
_
_
hypertre
width
hw
_
_
_
minimum
width
_
_
_
hypertre
decomposit
_
hypergraph
_
acycl
_
hw
_
exampl
_
_
hypergraph
i0
_
b0
_
_
figur
_
_
_
exampl
acycl
hypergraph
_
_
_
_
_
hypergraph
h1
_
¯h1
_
_
figur
_
_
figur
_
_
_
_
_
_
acycl
_
_
hypertre
width
_
_
width
hypertre
decomposit
_
¯h1
_
_
_
figur
_
_
_
particular
_
observ
_
h1
_
_
_
_
_
_
_
hyperedg
h4
_
h5
_
i0
_
b0
_
model
_
_
instanc
_
_
_
new
bid
_
b4
_
b5
_
_
_
_
_
_
_
_
auction
_
_
_
follow
_
_
_
_
_
_
hypergraph
associ
_
maxwsp
problem
_
_
_
deal
_
_
dual
¯h
_
_
_
_
_
_
hypergraph
such
_
_
node
_
_
_
_
_
correspond
_
_
hyperedg
_
_
_
_
_
_
node
_
_
_
¯h
_
_
_
exampl
_
_
reader
_
want
_
check
_
_
hypergraph
h1
_
figur
_
_
notic
_
_
hypergraph
_
figur
_
_
_
fact
_
dual
_
_
rational
_
_
choic
_
_
_
restrict
_
_
origin
hypergraph
_
guarante
_
_
tractabl
onli
_
_
simpl
scenario
_
theorem
_
_
_
class
_
acycl
hypergraph
_
maxwsp
_
_
_
_
node
occur
_
_
hyperedg
_
most
_
_
_
np
hard
_
_
_
_
node
_
_
_
_
hyperedg
_
most
_
_
hypertre
decomposit
_
_
dual
hypergraph
_
tractabl
pack
problem
_
fix
constant
_
let
hw
_
denot
_
class
_
_
_
hypergraph
_
dual
hypergraph
_
hypertre
width
bound
_
_
_
maximum
weight
set
pack
problem
_
_
_
_
polynomi
time
_
_
class
hw
_
_
mean
_
_
algorithm
computesetpackingk
_
_
_
figur
_
_
algorithm
receiv
_
input
hypergraph
_
weight
function
_
_
width
hypertre
decomposit
hd
_
_
_
_
¯h
_
_
_
vertex
_
let
hv
_
_
hypergraph
_
set
_
node
hv
coincid
_
_
_
_
set
_
edg
hv
coincid
_
_
_
_
initi
step
_
_
algorithm
equip
_
vertex
_
_
_
possibl
pack
_
hv
_
_
_
_
_
_
set
hv
_
note
_
_
size
_
hv
_
bound
_
_
_
_
node
_
_
_
left
uncov
_
pack
_
_
_
_
_
_
_
_
hyperedg
_
_
_
_
computesetpackingk
_
_
_
filter
_
pack
_
_
onli
_
_
conform
_
_
pack
_
hc
_
_
_
children
_
_
_
_
_
next
_
let
hv
_
hc
_
_
pack
_
hv
_
hc
_
_
_
_
_
_
hv
conform
_
hc
_
_
_
hv
hc
_
_
_
_
hc
hv
_
_
_
hv
_
_
_
_
_
hc
hc
_
_
_
_
hv
_
exampl
_
consid
_
_
hypertre
decomposit
_
¯h1
_
_
figur
_
_
_
_
_
set
_
_
_
possibl
pack
_
_
build
_
_
initi
step
_
computesetpackingk
_
_
_
_
_
vertic
_
_
refigur
_
exampl
applic
_
algorithm
computesetpackingk
_
input
_
_
_
_
width
hypertre
decomposit
hd
_
_
_
_
¯h
_
output
_
solut
_
maxwsp
_
_
var
hv
_
set
_
pack
_
hv
_
_
_
_
h∗
_
pack
_
_
hv
_
ration
number
_
_
_
partial
pack
hv
_
hv
_
hhv
_
_
partial
pack
_
hc
_
_
_
partial
pack
hv
_
hv
_
_
_
_
_
_
procedur
bottomup
_
begin
_
_
_
set
_
_
_
leav
_
_
_
∃v
such
_
_
_
_
ii
_
child
_
_
do
_
_
such
_
_
do
hv
_
hv
hv
∃hc
hc
_
_
hv
hc
_
_
_
hv
hv
do
hv
_
hv
_
_
_
such
_
_
do
¯hc
_
arg
maxhc∈hc
hv≈
hc
hc
hc
hv
_
hhv
_
_
¯hc
_
set
best
pack
hv
_
hv
¯hc
¯hc
hv
_
end
_
end
_
_
_
_
_
end
_
end
_
begin
main
_
_
vertex
_
do
hv
_
hv
pack
_
hv
_
bottomup
_
let
_
_
root
_
_
¯hr
_
arg
maxhr∈hr
hr
_
h∗
_
¯hr
_
includ
pack
opdown
_
hr
_
return
h∗
_
end
_
procedur
opdown
_
vertex
_
_
¯hv
hv
_
begin
_
_
_
_
_
do
¯hc
_
h¯hv
_
_
h∗
_
h∗
¯hc
_
includ
pack
opdown
_
¯hc
_
end
_
end
_
figur
_
algorithm
computesetpackingk
_
_
_
figur
_
_
_
instanc
_
_
root
v1
_
such
_
hv1
_
h1
_
h3
_
h5
_
_
_
_
arrow
_
pack
hc
_
hv
denot
_
hv
conform
_
hc
_
_
instanc
_
_
reader
_
check
_
_
pack
h3
hv1
conform
_
_
pack
h2
_
h3
hv3
_
_
do
_
conform
_
h1
hv3
_
computesetpackingk
build
solut
_
_
_
_
phase
_
_
_
first
phase
_
vertic
_
_
_
_
_
leav
_
_
root
_
_
mean
_
_
procedur
bottomup
_
_
_
node
_
_
_
_
set
hv
_
preliminari
_
_
_
_
_
pack
hv
_
do
_
conform
_
_
pack
_
_
_
_
children
_
_
_
_
filter
_
_
_
_
weight
hv
_
_
_
_
_
hv
store
_
weight
_
_
best
partial
pack
_
_
_
_
onli
_
hyperedg
_
_
tv
_
_
_
_
_
leaf
_
_
hv
hv
_
_
_
_
_
child
_
_
_
hv
_
_
_
_
maximum
_
hc
hc
hv
_
_
_
pack
hc
_
conform
_
hv
_
tie
_
_
_
pack
¯hc
_
_
_
maximum
_
_
_
_
_
_
variabl
hhv
_
_
_
_
second
phase
_
_
tree
_
_
_
_
_
root
_
_
_
_
pack
h∗
_
_
_
maxim
_
weight
_
_
_
pack
_
hr
_
_
_
procedur
topdown
_
_
_
extend
h∗
_
_
_
other
partial
pack
_
vertic
_
_
_
particular
_
_
_
vertex
_
h∗
_
_
_
_
pack
hhv
_
_
_
_
child
_
_
exampl
_
_
_
_
_
_
_
exampl
_
h1
h2
h3
h4
_
_
_
_
execut
_
computesetpackingk
_
_
_
_
figur
_
_
_
_
arrow
_
pack
hc
_
pack
hv
_
_
_
denot
_
hc
hhv
_
_
_
_
_
choic
_
_
_
comput
_
such
_
_
pack
h2
_
h3
_
_
_
_
particular
_
_
_
bottom
_
phase
_
_
_
_
_
v4
_
_
_
_
_
set
v4
h2
v4
h4
_
v4
_
v3
_
_
_
_
_
set
v3
h1
v3
h3
_
v3
_
v2
_
_
_
_
_
set
v2
h1
v2
h2
v2
h3
v2
h4
_
v2
h2
_
h3
_
v3
_
v1
_
_
_
_
set
v1
h1
_
v1
h5
v1
h3
_
v1
_
_
instanc
_
note
_
v1
h5
_
h5
conform
_
_
pack
h4
_
hv2
such
_
v2
h4
_
_
_
_
_
begin
_
_
top
_
phase
_
computesetpackingk
select
h3
_
pack
_
hv1
_
propag
_
choic
_
_
tree
_
_
_
_
algorithm
_
_
_
h5
_
_
further
exampl
_
_
way
_
solut
h1
_
_
_
_
algorithm
_
h1
_
h2
h3
h4
_
_
_
figur
_
_
notic
_
_
_
time
_
_
_
top
_
phase
_
computesetpackingk
start
_
h1
_
_
best
pack
_
hv1
_
theorem
_
let
_
hypergraph
_
_
weight
function
_
_
_
let
hd
_
_
_
complet
width
hypertre
decomposit
_
¯h
_
_
_
computesetpackingk
_
input
_
_
_
hd
_
output
solut
_
maxwsp
_
_
time
_
_
proof
_
sketch
_
observ
_
h∗
_
_
computesetpackingk
_
pack
_
_
_
_
consid
pair
_
hyperedg
h1
_
h2
_
h∗
_
_
_
_
_
_
sake
_
contradict
_
_
h1
h2
_
let
v1
resp
_
_
v2
_
_
arbitrari
vertex
_
_
_
_
computesetpackingk
_
h1
resp
_
_
h2
_
h∗
_
_
bottom
_
comput
_
_
construct
_
_
_
h1
v1
_
h2
v2
_
let
_
_
element
_
h1
h2
_
_
_
dual
hypergraph
_
_
hyperedg
_
¯h
_
cover
_
_
node
h1
_
h2
_
henc
_
_
condit
_
definit
_
_
_
vertex
vertic
such
_
h1
_
h2
_
note
_
_
_
_
_
connected
condit
_
definit
_
_
_
_
_
_
_
_
_
_
_
_
_
_
_
path
_
v1
_
v2
_
_
let
hv
hv
denot
_
element
_
_
computesetpackingk
_
h∗
_
_
bottom
_
phase
_
_
_
element
_
hv
_
pack
_
hv
_
_
_
_
case
_
_
h1
hv
_
h2
hv
_
_
_
_
_
_
_
_
_
h1
hv
_
_
notic
_
_
vertex
_
_
_
path
_
_
v1
_
such
_
h1
_
_
_
_
connected
condit
_
henc
_
_
_
definit
_
conform
_
_
pack
hw
_
_
computesetpackingk
_
_
_
_
vertex
_
h∗
_
_
such
_
h1
hw
_
_
_
_
particular
_
v1
_
contradict
_
_
definit
_
v1
_
_
_
h∗
_
pack
_
_
_
remain
_
_
show
_
_
_
_
maximum
weight
_
_
_
pack
_
_
_
_
aim
_
_
_
use
structur
induct
_
_
prove
_
_
_
_
bottom
_
phase
_
_
variabl
hv
_
_
_
contain
_
weight
_
_
pack
_
_
edg
_
tv
_
_
contain
hv
_
_
_
_
maximum
weight
_
_
such
pack
_
_
edg
_
tv
_
_
_
_
result
_
_
_
_
_
top
_
phase
_
_
pack
hr
_
_
maximum
weight
_
tr
_
first
_
_
h∗
_
_
_
_
_
_
node
_
_
pack
hhv
_
_
_
hv
_
such
_
_
maximum
valu
_
hv
_
_
_
_
_
_
complex
_
observ
_
_
initi
step
_
_
construct
_
_
set
hv
_
_
_
vertex
_
_
_
set
_
size
_
most
_
_
_
_
function
bottomup
check
_
_
conform
_
strategi
_
hv
_
strategi
_
hc
_
_
_
pair
_
_
_
updat
_
weight
hv
_
_
task
_
_
_
_
_
time
_
_
_
_
_
_
_
edg
_
_
_
_
_
time
_
_
_
_
function
topdown
_
_
_
_
linear
time
_
_
size
_
_
_
_
_
_
_
h∗
_
_
_
variabl
hhv
_
_
_
abov
result
show
_
_
hypertre
decomposit
_
width
_
_
_
_
maxwsp
problem
_
_
_
_
_
_
_
_
_
_
case
_
structur
item
graph
_
_
_
_
_
_
_
_
exist
_
bound
hypertre
decomposit
_
_
_
_
_
_
problem
_
_
_
_
_
_
polynomi
time
_
_
_
theorem
wit
_
_
class
hw
_
_
constitut
tractabl
class
_
_
winner
determin
problem
_
_
_
follow
theorem
show
_
_
larg
subclass
_
depend
onli
_
_
_
weight
function
_
_
_
maxwsp
_
_
_
_
paralleliz
_
let
_
call
weight
function
smooth
_
_
_
logspac
comput
_
_
_
weight
_
polynomi
_
_
_
requir
log
bit
_
_
represent
_
recal
_
logcfl
_
parallel
complex
class
_
_
nc2
_
cf
_
_
_
function
version
_
logcfl
_
llogcfl
_
_
_
_
_
_
logspac
transduc
_
_
oracl
_
logcfl
_
theorem
_
let
_
hypergraph
_
hw
_
_
_
let
_
smooth
weight
function
_
_
_
_
_
maxwsp
_
_
_
llogcfl
_
_
hypertre
decomposit
vs
structur
item
graph
_
_
_
class
hw
_
_
_
_
_
_
_
island
_
tractabl
_
_
winner
determin
problem
_
_
_
_
_
class
ig
_
_
_
_
_
_
_
_
recogniz
_
_
_
_
inclin
_
think
_
_
_
instanc
_
unbound
hypertre
width
_
_
_
_
item
graph
_
bound
tree
width
_
_
_
intract
_
structur
item
graph
_
lie
_
_
gener
_
_
_
_
_
_
_
_
_
case
_
_
line
_
_
proof
_
_
first
show
_
structur
item
graph
_
_
_
_
_
correspond
_
special
kind
_
hypertre
decomposit
_
_
dual
hypergraph
_
_
_
_
call
strict
_
_
_
_
result
_
_
_
_
_
width
strict
hypertre
decomposit
_
_
power
_
kwith
hypertre
decomposit
_
_
strict
hypertre
decomposit
let
_
hypergraph
_
_
let
_
set
_
node
_
_
_
_
adjac
_
_
_
exist
_
edg
such
_
_
_
path
_
_
_
sequenc
x0
_
_
_
_
_
_
variabl
such
_
_
xi
_
adjac
_
xi
_
_
_
_
_
_
_
set
_
node
_
_
_
∀x
_
_
_
path
_
_
_
compon
_
maxim
_
non
empti
set
_
node
_
_
_
compon
_
let
_
definit
_
hypertre
decomposit
hd
_
_
_
_
strict
_
_
follow
condit
hold
_
_
_
_
pair
_
vertic
_
_
vertic
such
_
_
child
_
_
_
_
_
compon
cr
_
_
cr
ts
_
cr
_
compon
_
_
_
_
edg
_
_
_
vertex
such
_
_
_
_
_
cover
_
_
_
_
edg
_
_
set
vertic
induc
_
subtre
_
_
_
strict
hypertre
width
shw
_
_
_
minimum
width
_
_
_
strict
hypertre
decomposit
_
_
basic
relationship
_
nice
hypertre
decomposit
_
structur
item
graph
_
_
_
_
follow
theorem
_
theorem
_
let
_
hypergraph
such
_
_
_
node
_
_
_
_
_
_
width
tree
decomposit
_
_
item
graph
_
exist
_
_
onli
_
¯h
_
width
strict
hypertre
decomposition2
_
note
_
_
_
_
_
_
maximum
weight
set
pack
problem
_
concern
_
_
hypergraph
_
_
_
_
_
_
_
_
node
_
_
_
_
_
fact
_
_
_
hyperedg
_
_
_
_
hypergraph
_
_
_
_
_
_
_
loss
_
gener
_
_
_
_
_
_
_
shw
_
denot
_
class
_
_
_
hypergraph
_
dual
hypergraph
associ
_
maximum
_
term
onli
play
_
technic
role
_
_
care
_
_
differ
definit
_
width
_
tree
decomposit
_
hypertre
decomposit
_
weight
set
pack
problem
_
strict
hypertre
width
bound
_
_
_
_
_
shw
_
ig
_
_
_
definit
_
strict
hypertre
decomposit
_
special
hypertre
decomposit
_
_
fact
_
_
_
abl
_
show
_
_
addit
condit
_
definit
induc
_
actual
restrict
_
_
decomposit
power
_
theorem
_
ig
_
shw
_
hw
_
_
game
theoret
view
_
_
_
further
light
_
strict
hypertre
decomposit
_
_
_
interest
character
_
_
_
strict
robber
_
marshal
game
_
_
_
_
_
robber
_
marshal
game
_
_
_
_
character
hypertre
width
_
_
game
_
_
_
hypergraph
_
robber
_
marshal
_
act
_
coordin
_
marshal
move
_
_
hyperedg
_
_
_
_
robber
move
_
node
_
_
_
robber
see
_
_
marshal
intend
_
move
_
_
react
_
_
_
_
node
_
_
_
_
_
current
posit
_
_
path
_
_
_
_
use
_
node
_
_
hyperedg
_
_
_
_
_
marshal
_
_
_
_
move
_
_
_
_
hyperedg
_
_
_
note
_
_
_
basic
game
_
_
_
_
robber
_
_
_
_
move
_
vertic
_
_
_
_
_
marshal
_
_
_
_
move
_
_
_
_
do
_
_
_
_
hyperedg
_
_
_
marshal
_
_
_
play
_
_
_
_
_
_
cannot
occupi
_
edg
_
_
_
_
_
_
game
_
_
_
_
_
_
_
_
marshal
win
_
game
_
_
captur
_
robber
_
_
_
_
edg
_
node
_
_
robber
_
_
_
_
_
robber
win
_
theorem
_
let
_
hypergraph
such
_
_
_
node
_
_
_
_
_
_
¯h
_
width
strict
hypertre
decomposit
_
_
onli
_
marshal
_
win
_
strict
robber
_
marshal
game
_
¯h
_
_
matter
_
_
robber
move
_
_
conclus
_
_
_
_
open
question
_
_
_
complex
_
_
structur
item
graph
associ
_
combinatori
auction
scenario
_
_
result
_
bad
news
_
_
_
_
_
_
_
_
np
complet
_
check
_
combinatori
auction
_
structur
item
graph
_
_
_
treewidth
_
_
_
_
result
_
_
_
_
use
_
hypertre
decomposit
_
_
dual
hypergraph
associ
_
_
scenario
_
_
_
_
_
problem
_
tractabl
_
_
class
_
_
instanc
_
dual
hypergraph
_
bound
hypertre
width
_
_
_
special
_
_
relev
case
_
_
paralleliz
algorithm
_
_
_
_
_
_
_
_
_
_
_
class
_
structur
item
graph
_
_
_
_
_
class
_
instanc
_
bound
hypertre
width
henc
_
_
reason
_
_
intract
_
_
_
gener
_
_
particular
_
_
latter
result
_
_
_
_
precis
relationship
_
structur
item
graph
_
_
form
_
hypertre
decomposit
_
_
dual
hypergraph
_
_
queri
decomposit
see
_
_
_
_
_
_
_
light
_
_
observ
_
_
note
_
_
_
approxim
result
_
structur
item
graph
_
deep
understand
_
_
approxim
_
queri
decomposit
_
_
_
_
_
_
_
literatur
_
_
further
avenu
_
research
_
_
_
_
relev
_
enhanc
_
algorithm
computesetpackingk
_
_
_
_
_
_
special
data
structur
_
_
order
_
avoid
_
quadrat
depend
_
_
_
_
_
other
interest
question
_
_
assess
_
_
structur
decomposit
techniqu
_
_
_
paper
_
_
_
_
_
deal
_
gener
_
_
winner
determin
problem
_
_
instanc
_
_
_
_
relev
_
sever
applic
scenario
_
design
algorithm
_
_
_
_
strategi
_
sever
copi
_
_
same
item
_
avail
_
_
_
_
_
_
_
auction
_
satisfi
_
_
least
_
number
_
copi
_
_
_
_
acknowledg
_
gottlob
work
_
_
_
_
ec3
commerc
compet
center
vienna
_
_
royal
societi
wolfson
research
merit
award
_
_
particular
_
_
award
_
gottlob
_
invit
_
greco
_
research
visit
_
oxford
_
_
addit
_
_
greco
_
_
_
icar
cnr
_
_
_
_
_
_
_
_
project
tocai
_
_
_
_
refer
_
adler
_
_
gottlob
_
_
_
grohe
_
hypertre
width
_
relat
hypergraph
invari
_
_
proc
_
_
eurocomb
_
page
_
_
_
boutili
_
_
_
_
combinatori
auction
problem
_
_
proc
_
_
aaai
_
page
_
_
_
conitz
_
_
derryberri
_
_
_
sandholm
_
combinatori
auction
_
structur
item
graph
_
_
proc
_
_
aaai
_
page
_
_
_
_
eschen
_
_
_
sinrad
_
_
n2
algorithm
_
circular
arc
graph
recognit
_
_
proc
_
_
soda
_
page
_
_
_
fujishima
_
_
leyton
brown
_
_
_
shoham
_
_
_
comput
complex
_
combinatori
auction
_
optim
_
approxim
_
_
proc
_
_
ijcai
_
page
_
_
_
gottlob
_
_
leon
_
_
_
scarcello
_
robber
_
marshal
_
_
guard
_
game
theoret
_
logic
character
_
hypertre
width
_
journal
_
comput
_
system
scienc
_
_
_
_
_
gottlob
_
_
leon
_
_
_
scarcello
_
hypertre
decomposit
_
tractabl
queri
_
journal
_
comput
_
system
scienc
_
_
_
_
_
_
hoo
_
_
boutili
_
_
combinatori
auction
_
stochast
local
search
_
_
proc
_
_
aaai
_
page
_
_
_
johnson
_
catalog
_
complex
class
_
_
_
cramton
_
_
shoham
_
_
_
steinberg
_
editor
_
handbook
_
theoret
comput
scienc
_
volum
_
algorithm
_
complex
_
page
_
_
_
kort
_
_
_
_
_
_
increment
linear
time
algorithm
_
_
interv
graph
_
siam
journal
_
_
_
_
_
_
_
lehmann
_
_
m¨uller
_
_
_
sandholm
_
_
winner
determin
problem
_
_
_
cramton
_
_
shoham
_
_
_
steinberg
_
editor
_
combinatori
auction
_
mit
press
_
_
_
lehmann
_
_
_
callaghan
_
_
_
shoham
_
truth
revel
_
_
effici
combinatori
auction
_
_
acm
_
_
_
_
_
mcafe
_
_
mcmillan
_
_
_
airwav
auction
_
journal
_
econom
perspect
_
_
_
_
_
mcmillan
_
_
spectrum
right
_
journal
_
econom
perspect
_
_
_
_
_
nisan
_
bid
_
alloc
_
combinatori
auction
_
_
proc
_
_
ec
_
page
_
_
_
robertson
_
_
seymour
_
graph
minor
ii
_
algorithm
aspect
_
tree
width
_
journal
_
algorithm
_
_
_
_
_
_
rothkopf
_
_
pekec
_
_
_
_
harstad
_
_
manag
combinatori
auction
_
manag
scienc
_
_
_
_
_
sandholm
_
_
implement
_
_
contract
net
protocol
_
_
margin
cost
calcul
_
_
proc
_
_
aaai
_
page
_
_
_
sandholm
_
algorithm
_
optim
winner
determin
_
combinatori
auction
_
artifici
intellig
_
_
_
_
_
sandholm
_
winner
determin
algorithm
_
_
_
cramton
_
_
shoham
_
_
_
steinberg
_
editor
_
combinatori
auction
_
mit
press
_
_
_
sandholm
_
_
suri
_
bob
_
_
winner
determin
_
combinatori
auction
_
gener
_
artifici
intellig
_
_
_
_
_
tennenholtz
_
_
tractabl
combinatori
auction
_
_
proc
_
_
aaai
_
page
_
_
_
zurel
_
_
nisan
_
_
effici
approxim
alloc
algorithm
_
combinatori
auction
_
_
proc
_
_
ec
_
page
_
_
